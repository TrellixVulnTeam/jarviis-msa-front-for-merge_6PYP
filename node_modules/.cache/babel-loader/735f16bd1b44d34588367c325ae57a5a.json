{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\"; //받아오는 데이터//\n\nconst initialState = {\n  taskLoading: false,\n  taskData: null,\n  error: null\n};\nconst taskSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    //suggestion\n    taskRequest(state, _action) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    taskSuccess(state, action) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    taskFailure(state, action) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    },\n\n    CompleteRequest(state, _action) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    CompleteSuccess(state, action) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    CompleteFailure(state, action) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    },\n\n    addTaskRequest(state, _action) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    addTaskSuccess(state, action) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    addTaskFailure(state, action) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    },\n\n    deleteTaskRequest(state, _action) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    deleteTaskSuccess(state, action) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    deleteTaskFailure(state, action) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    task: taskSlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = taskSlice;\nexport const {\n  taskRequest,\n  taskSuccess,\n  taskFailure,\n  CompleteRequest,\n  CompleteSuccess,\n  CompleteFailure,\n  addTaskRequest,\n  addTaskSuccess,\n  addTaskFailure,\n  deleteTaskRequest,\n  deleteTaskSuccess,\n  deleteTaskFailure\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["D:/jarvis-final/jarviis-msa-front-for-merge/src/features/todo/reducer/taskSlice.ts"],"names":["configureStore","createSlice","initialState","taskLoading","taskData","error","taskSlice","name","reducers","taskRequest","state","_action","taskSuccess","action","payload","taskFailure","CompleteRequest","CompleteSuccess","CompleteFailure","addTaskRequest","addTaskSuccess","addTaskFailure","deleteTaskRequest","deleteTaskSuccess","deleteTaskFailure","store","reducer","task","actions"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA2D,kBAA3D,C,CAEA;;AA0DA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,WAAW,EAAG,KADgB;AAE9BC,EAAAA,QAAQ,EAAE,IAFoB;AAG9BC,EAAAA,KAAK,EAAE;AAHuB,CAAhC;AAMA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,OADsB;AAE5BL,EAAAA,YAF4B;AAG5BM,EAAAA,QAAQ,EAAE;AAER;AACAC,IAAAA,WAAW,CAACC,KAAD,EAAmBC,OAAnB,EAAsD;AAC/DD,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD,KANO;;AAQRO,IAAAA,WAAW,CAACF,KAAD,EAAmBG,MAAnB,EAA+D;AACxEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB;AACAO,MAAAA,KAAK,CAACN,QAAN,GAAiBS,MAAM,CAACC,OAAxB;AACD,KAXO;;AAaRC,IAAAA,WAAW,CAACL,KAAD,EAAmBG,MAAnB,EAA0D;AACnEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACD,KAhBO;;AAiBRE,IAAAA,eAAe,CAACN,KAAD,EAAmBC,OAAnB,EAA8D;AAC3ED,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD,KApBO;;AAsBRY,IAAAA,eAAe,CAACP,KAAD,EAAmBG,MAAnB,EAA6D;AAC1EH,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB;AACAO,MAAAA,KAAK,CAACN,QAAN,GAAiBS,MAAM,CAACC,OAAxB;AACD,KAzBO;;AA2BRI,IAAAA,eAAe,CAACR,KAAD,EAAmBG,MAAnB,EAA0D;AACvEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACD,KA9BO;;AA+BRK,IAAAA,cAAc,CAACT,KAAD,EAAmBC,OAAnB,EAA2D;AACvED,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD,KAlCO;;AAoCRe,IAAAA,cAAc,CAACV,KAAD,EAAmBG,MAAnB,EAA0D;AACtEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB;AACAO,MAAAA,KAAK,CAACN,QAAN,GAAiBS,MAAM,CAACC,OAAxB;AACD,KAvCO;;AAyCRO,IAAAA,cAAc,CAACX,KAAD,EAAmBG,MAAnB,EAA0D;AACtEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACD,KA5CO;;AA6CRQ,IAAAA,iBAAiB,CAACZ,KAAD,EAAmBC,OAAnB,EAAwD;AACvED,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACD,KAhDO;;AAkDRkB,IAAAA,iBAAiB,CAACb,KAAD,EAAmBG,MAAnB,EAAuD;AACtEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB;AACAO,MAAAA,KAAK,CAACN,QAAN,GAAiBS,MAAM,CAACC,OAAxB;AACD,KArDO;;AAuDRU,IAAAA,iBAAiB,CAACd,KAAD,EAAmBG,MAAnB,EAA0D;AACzEH,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACD;;AA1DO;AAHkB,CAAD,CAA7B;AAiEA,MAAMW,KAAK,GAAGzB,cAAc,CAAC;AAC3B0B,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAErB,SAAS,CAACoB;AADX;AADkB,CAAD,CAA5B;AAOA,MAAM;AAAEA,EAAAA,OAAF;AAAWE,EAAAA;AAAX,IAAuBtB,SAA7B;AAEA,OAAO,MAAM;AACXG,EAAAA,WADW;AAEXG,EAAAA,WAFW;AAGXG,EAAAA,WAHW;AAIXC,EAAAA,eAJW;AAKXC,EAAAA,eALW;AAMXC,EAAAA,eANW;AAOXC,EAAAA,cAPW;AAQXC,EAAAA,cARW;AASXC,EAAAA,cATW;AAUXC,EAAAA,iBAVW;AAWXC,EAAAA,iBAXW;AAYXC,EAAAA;AAZW,IAaTI,OAbG;AAeP,eAAeF,OAAf","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n//받아오는 데이터//\nexport interface taskListDataPayload {\n  data:[\n    id: number,\n    user_id: number,\n    created: string,\n    update: string,\n    classification: string,\n    type: string,\n    title: string,\n    start: string,\n    end: string,\n    location: string,\n    completion: string,\n    description: string\n  ]\n}\n\n\n\n//요청하는 데이터\nexport interface taskPayload {\n  user_id: number;\n}\n\nexport interface completionPayload {\n  id:number;\n  completion: boolean;\n}\n\nexport interface addTaskPayload{\n  user_id: number,\n  classification: string,\n  title: string,\n  start: string,\n  end: string,\n  location: string, \n  completion: string, \n  description: string, \n}\n\n\n\n//미들웨어\nexport interface taskState {\n  taskLoading: boolean;\n  taskData: any;\n  error: any;\n}\n\n// api의 param 타입\nexport interface ParamType {\n  date: string;\n}\nexport interface idParamType{\n  id:number;\n}\n\nconst initialState: taskState = {\n  taskLoading : false,\n  taskData: null,\n  error: null,\n};\n\nconst taskSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n\n    //suggestion\n    taskRequest(state: taskState, _action: PayloadAction<ParamType>) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    taskSuccess(state: taskState, action: PayloadAction<taskListDataPayload>) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    taskFailure(state: taskState, action: PayloadAction<{ error: any }>) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    },\n    CompleteRequest(state: taskState, _action: PayloadAction<completionPayload>) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    CompleteSuccess(state: taskState, action: PayloadAction<completionPayload>) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    CompleteFailure(state: taskState, action: PayloadAction<{ error: any }>) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    },\n    addTaskRequest(state: taskState, _action: PayloadAction<addTaskPayload>) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    addTaskSuccess(state: taskState, action: PayloadAction<addTaskPayload>) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    addTaskFailure(state: taskState, action: PayloadAction<{ error: any }>) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    },    \n    deleteTaskRequest(state: taskState, _action: PayloadAction<idParamType>) {\n      state.taskLoading = true;\n      state.error = null;\n    },\n\n    deleteTaskSuccess(state: taskState, action: PayloadAction<idParamType>) {\n      state.taskLoading = false;\n      state.taskData = action.payload;\n    },\n\n    deleteTaskFailure(state: taskState, action: PayloadAction<{ error: any }>) {\n      state.taskLoading = true;\n      state.error = action.payload;\n    },\n  }\n})\n\nconst store = configureStore({\n  reducer: {\n      task: taskSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = taskSlice;\n\nexport const {\n  taskRequest,\n  taskSuccess,\n  taskFailure,\n  CompleteRequest,\n  CompleteSuccess,\n  CompleteFailure,\n  addTaskRequest,\n  addTaskSuccess,\n  addTaskFailure,\n  deleteTaskRequest,\n  deleteTaskSuccess,\n  deleteTaskFailure\n} = actions;\n\nexport default reducer;\n    \n\n"]},"metadata":{},"sourceType":"module"}