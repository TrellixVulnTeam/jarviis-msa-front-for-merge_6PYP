{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\seosuwan\\\\Desktop\\\\team\\\\jarviis-msa-front-for-merge\\\\src\\\\features\\\\history\\\\components\\\\HistoryMap.js\";\nimport { Map, MapMarker, useMap } from 'react-kakao-maps-sdk';\nimport { useState, React, useEffect } from 'react';\nimport EventMarkerContainer from './EventMarkerContainer';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HistoryMap(props) {\n  // const map = useMap()\n  // const [map, setMap] = useState()\n  const t = props.data;\n  const [isOpen, setIsOpen] = useState(false);\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true\n  }); // let points = useSelector(state => state.history.historyData.map(\n  //   x => {\n  //     return {\n  //       content: <div style={{ padding: \"5px\", color: \"#000\" }}>{x.name}</div>,\n  //       latlng: { lat: x.latitude, lng: x.longitude }\n  //     }\n  //   }\n  // ))\n\n  const points = t.map(x => {\n    console.log(`x.location :: ${JSON.stringify(x.location)}`);\n    return {\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"5px\",\n          color: \"#000\"\n        },\n        children: JSON.stringify(x.location)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this),\n      // latlng: { lat: parseFloat(x.y), lng: parseFloat(x.x) }\n      // latlng: { lat: parseFloat(x.x), lng: parseFloat(x.y) }\n      latlng: {\n        lat: Math.floor(x.y * 1000000) / 1000000,\n        lng: Math.floor(x.x * 1000000) / 1000000\n      }\n    };\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        setState(prev => ({ ...prev,\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => ({ ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => ({ ...prev,\n        errMsg: \"현재 위치를 찾을수없습니다.\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n  , {\n    center: state.center,\n    style: {\n      // 지도의 크기\n      width: \"95%\",\n      height: \"450px\"\n    },\n    level: 3 // 지도의 확대 레벨\n    ,\n    children: [!state.isLoading &&\n    /*#__PURE__*/\n    // <MapMarker position={state.center}>\n    // </MapMarker>\n    _jsxDEV(MapMarker, {\n      position: {\n        lat: state.center.lat,\n        lng: state.center.lng\n      } // title='현재 위치'\n      ,\n      image: {\n        // 무료 마커이미지의 주소: https://www.flaticon.com/kr/\n        // src: \"https://cdn-icons.flaticon.com/png/512/5693/premium/5693914.png?token=exp=1637741898~hmac=fada3fe37d0197cf397c5d7713400e95\",\n        // src: \"https://cdn-icons.flaticon.com/png/512/5693/premium/5693889.png?token=exp=1640321865~hmac=62f8675abb29add857f5350b5ba27672\",\n        src: \"https://cdn-icons-png.flaticon.com/512/5015/5015093.png\",\n        size: {\n          width: 45,\n          height: 45\n        },\n        options: {\n          offset: {\n            x: 25,\n            y: 45\n          }\n        }\n      } // onClick={(marker) => map.panTo(marker.getPosition())}\n      ,\n      onMouseOver: () => setIsOpen(true),\n      onMouseOut: () => setIsOpen(false),\n      children: isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"5px\",\n          color: \"#000\"\n        },\n        children: \"\\uB0B4 \\uC704\\uCE58\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this), points.map(value => /*#__PURE__*/_jsxDEV(EventMarkerContainer, {\n      position: value.latlng,\n      content: value.content\n    }, `EventMarkerContainer-${value.latlng.lat}-${value.latlng.lng}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n}\n\nexport default HistoryMap;","map":{"version":3,"sources":["C:/Users/seosuwan/Desktop/team/jarviis-msa-front-for-merge/src/features/history/components/HistoryMap.js"],"names":["Map","MapMarker","useMap","useState","React","useEffect","EventMarkerContainer","useSelector","HistoryMap","props","t","data","isOpen","setIsOpen","state","setState","center","lat","lng","errMsg","isLoading","points","map","x","console","log","JSON","stringify","location","content","padding","color","latlng","Math","floor","y","navigator","geolocation","getCurrentPosition","position","prev","coords","latitude","longitude","err","message","width","height","src","size","options","offset","value"],"mappings":"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","sourcesContent":["import { Map, MapMarker, useMap } from 'react-kakao-maps-sdk';\nimport { useState, React, useEffect } from 'react'\nimport EventMarkerContainer from './EventMarkerContainer';\nimport { useSelector } from 'react-redux';\n\nfunction HistoryMap(props) {\n  // const map = useMap()\n  // const [map, setMap] = useState()\n\n  const t = props.data\n  const [isOpen, setIsOpen] = useState(false)\n\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667,\n    },\n    errMsg: null,\n    isLoading: true,\n  })\n  // let points = useSelector(state => state.history.historyData.map(\n  //   x => {\n  //     return {\n  //       content: <div style={{ padding: \"5px\", color: \"#000\" }}>{x.name}</div>,\n  //       latlng: { lat: x.latitude, lng: x.longitude }\n  //     }\n  //   }\n  // ))\n  const points = t.map(\n    x => {\n      console.log(`x.location :: ${JSON.stringify(x.location)}`)\n      return {\n        content: <div style={{ padding: \"5px\", color: \"#000\" }}>{JSON.stringify(x.location)}</div>,\n        // latlng: { lat: parseFloat(x.y), lng: parseFloat(x.x) }\n        // latlng: { lat: parseFloat(x.x), lng: parseFloat(x.y) }\n        latlng: { lat: Math.floor(x.y * 1000000) /1000000, lng: Math.floor(x.x * 1000000) /1000000 }\n      }\n    }\n  )\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setState((prev) => ({\n            ...prev,\n            center: {\n              lat: position.coords.latitude, // 위도\n              lng: position.coords.longitude, // 경도\n            },\n            isLoading: false,\n          }))\n        },\n        (err) => {\n          setState((prev) => ({\n            ...prev,\n            errMsg: err.message,\n            isLoading: false,\n          }))\n        }\n      )\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState((prev) => ({\n        ...prev,\n        errMsg: \"현재 위치를 찾을수없습니다.\",\n        isLoading: false,\n      }))\n    }\n  }, [])\n\n  return (\n      <Map // 지도를 표시할 Container\n        center={state.center}\n        style={{\n          // 지도의 크기\n          width: \"95%\",\n          height: \"450px\",\n        }}\n        level={3} // 지도의 확대 레벨\n      >\n        {!state.isLoading && (\n          // <MapMarker position={state.center}>\n          // </MapMarker>\n          <MapMarker\n            position={{ lat: state.center.lat, lng: state.center.lng }}\n            // title='현재 위치'\n            image={{\n              // 무료 마커이미지의 주소: https://www.flaticon.com/kr/\n              // src: \"https://cdn-icons.flaticon.com/png/512/5693/premium/5693914.png?token=exp=1637741898~hmac=fada3fe37d0197cf397c5d7713400e95\",\n              // src: \"https://cdn-icons.flaticon.com/png/512/5693/premium/5693889.png?token=exp=1640321865~hmac=62f8675abb29add857f5350b5ba27672\",\n              src: \"https://cdn-icons-png.flaticon.com/512/5015/5015093.png\",\n\n              size: {\n                width: 45,\n                height: 45,\n              },\n              options: {\n                offset: {\n                  x: 25,\n                  y: 45,\n                },\n              },\n            }}\n            // onClick={(marker) => map.panTo(marker.getPosition())}\n            onMouseOver={() => setIsOpen(true)}\n            onMouseOut={() => setIsOpen(false)}\n          >{isOpen && <div style={{ padding: \"5px\", color: \"#000\" }}>내 위치</div>}</MapMarker>\n        )}\n        {points.map((value) => (\n            <EventMarkerContainer\n              key={`EventMarkerContainer-${value.latlng.lat}-${value.latlng.lng}`}\n              position={value.latlng}\n              content={value.content}\n            />\n        ))}\n      </Map>\n  )\n}\nexport default HistoryMap;"]},"metadata":{},"sourceType":"module"}