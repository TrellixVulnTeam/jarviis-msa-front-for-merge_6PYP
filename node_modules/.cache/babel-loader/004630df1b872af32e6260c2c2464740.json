{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport diaryAPI from \"../reducer/diaryAPI\";\nimport { diaryCreateFailure, diaryCreateRequest, diaryCreateSuccess, diaryFindFailure, diaryFindRequest, diaryFindSuccess, diaryMemoFailure, diaryMemoRequest, diaryMemoSuccess } from \"../reducer/diarySlice\"; // find\n\nfunction* find(action) {\n  try {\n    // alert(\"SAGA!\")\n    const result = yield call(diaryAPI.findAPI, action.payload);\n    yield put(diaryFindSuccess(result));\n  } catch (error) {\n    yield put(diaryFindFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchDiaryFind() {\n  yield takeLatest(diaryFindRequest.type, find);\n} // Memo\n\nfunction* memo(action) {\n  try {\n    // alert(\"SAGA!\")\n    const result = yield call(diaryAPI.memoAPI, action.payload);\n    yield put(diaryMemoSuccess(result));\n  } catch (error) {\n    yield put(diaryMemoFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchDiaryMemo() {\n  yield takeLatest(diaryMemoRequest.type, memo);\n}\n\nfunction* create(action) {\n  try {\n    const result = yield call(diaryAPI.createaAPI, action.payload);\n    yield put(diaryCreateSuccess(result));\n  } catch (error) {\n    yield put(diaryCreateFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchDiaryCreate() {\n  yield takeLatest(diaryCreateRequest.type, create);\n}","map":{"version":3,"sources":["D:/jarvis-final/jarviis-msa-front-for-merge/src/features/diary/module/diarySaga.ts"],"names":["call","put","takeLatest","diaryAPI","diaryCreateFailure","diaryCreateRequest","diaryCreateSuccess","diaryFindFailure","diaryFindRequest","diaryFindSuccess","diaryMemoFailure","diaryMemoRequest","diaryMemoSuccess","find","action","result","findAPI","payload","error","alert","watchDiaryFind","type","memo","memoAPI","watchDiaryMemo","create","createaAPI","watchDiaryCreate"],"mappings":"AACA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,kBAAT,EAAiDC,kBAAjD,EAAqEC,kBAArE,EAA2GC,gBAA3G,EAA+IC,gBAA/I,EAAiKC,gBAAjK,EAAmLC,gBAAnL,EAAuNC,gBAAvN,EAAyOC,gBAAzO,QAAiQ,uBAAjQ,C,CAEA;;AACA,UAAUC,IAAV,CAAeC,MAAf,EAAwD;AACpD,MAAI;AACA;AACA,UAAMC,MAAwB,GAAG,MAAMf,IAAI,CACvCG,QAAQ,CAACa,OAD8B,EAEvCF,MAAM,CAACG,OAFgC,CAA3C;AAIA,UAAMhB,GAAG,CAACQ,gBAAgB,CAACM,MAAD,CAAjB,CAAT;AACH,GAPD,CAOE,OAAOG,KAAP,EAAmB;AACjB,UAAMjB,GAAG,CAACM,gBAAgB,CAACW,KAAD,CAAjB,CAAT;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ;;AAED,OAAO,UAAUE,cAAV,GAA2B;AAC9B,QAAMlB,UAAU,CAACM,gBAAgB,CAACa,IAAlB,EAAwBR,IAAxB,CAAhB;AACH,C,CAED;;AACA,UAAUS,IAAV,CAAeR,MAAf,EAAwD;AACpD,MAAI;AACA;AACA,UAAMC,MAAwB,GAAG,MAAMf,IAAI,CACvCG,QAAQ,CAACoB,OAD8B,EAEvCT,MAAM,CAACG,OAFgC,CAA3C;AAIA,UAAMhB,GAAG,CAACW,gBAAgB,CAACG,MAAD,CAAjB,CAAT;AACH,GAPD,CAOE,OAAOG,KAAP,EAAmB;AACjB,UAAMjB,GAAG,CAACS,gBAAgB,CAACQ,KAAD,CAAjB,CAAT;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ;;AAED,OAAO,UAAUM,cAAV,GAA2B;AAC9B,QAAMtB,UAAU,CAACS,gBAAgB,CAACU,IAAlB,EAAwBC,IAAxB,CAAhB;AACH;;AAED,UAAUG,MAAV,CAAiBX,MAAjB,EAA4D;AACxD,MAAI;AACA,UAAMC,MAA0B,GAAG,MAAMf,IAAI,CACzCG,QAAQ,CAACuB,UADgC,EAEzCZ,MAAM,CAACG,OAFkC,CAA7C;AAIA,UAAMhB,GAAG,CAACK,kBAAkB,CAACS,MAAD,CAAnB,CAAT;AACH,GAND,CAME,OAAOG,KAAP,EAAmB;AACjB,UAAMjB,GAAG,CAACG,kBAAkB,CAACc,KAAD,CAAnB,CAAT;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ;;AAED,OAAO,UAAUS,gBAAV,GAA6B;AAChC,QAAMzB,UAAU,CAACG,kBAAkB,CAACgB,IAApB,EAA0BI,MAA1B,CAAhB;AACH","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport diaryAPI from \"../reducer/diaryAPI\";\nimport { diaryCreateFailure, DiaryCreatePayload, diaryCreateRequest, diaryCreateSuccess, DiaryDataPayload, diaryFindFailure, DiaryFindPayload, diaryFindRequest, diaryFindSuccess, diaryMemoFailure, DiaryMemoPayload, diaryMemoRequest, diaryMemoSuccess } from \"../reducer/diarySlice\";\n\n// find\nfunction* find(action: PayloadAction<DiaryFindPayload>) {\n    try {\n        // alert(\"SAGA!\")\n        const result: DiaryDataPayload = yield call(\n            diaryAPI.findAPI,\n            action.payload\n        );\n        yield put(diaryFindSuccess(result));\n    } catch (error: any) {\n        yield put(diaryFindFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchDiaryFind() {\n    yield takeLatest(diaryFindRequest.type, find);\n}\n\n// Memo\nfunction* memo(action: PayloadAction<DiaryMemoPayload>) {\n    try {\n        // alert(\"SAGA!\")\n        const result: DiaryMemoPayload = yield call(\n            diaryAPI.memoAPI,\n            action.payload\n        );\n        yield put(diaryMemoSuccess(result));\n    } catch (error: any) {\n        yield put(diaryMemoFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchDiaryMemo() {\n    yield takeLatest(diaryMemoRequest.type, memo);\n}\n\nfunction* create(action: PayloadAction<DiaryCreatePayload>) {\n    try {\n        const result: DiaryCreatePayload = yield call(\n            diaryAPI.createaAPI,\n            action.payload\n        );\n        yield put(diaryCreateSuccess(result));\n    } catch (error: any) {\n        yield put(diaryCreateFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchDiaryCreate() {\n    yield takeLatest(diaryCreateRequest.type, create);\n}"]},"metadata":{},"sourceType":"module"}