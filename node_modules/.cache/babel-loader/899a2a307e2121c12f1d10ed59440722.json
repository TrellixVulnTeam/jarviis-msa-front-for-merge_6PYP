{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { historyFailure, historyRemoveFailure, historyRemoveFromTodoFailure, historyRemoveFromTodoRequest, historyRemoveFromTodoSuccess, historyRemoveRequest, historyRemoveSuccess, historyRequest, historySuccess } from \"features/history/reducer/historySlice\";\nimport { historyListRequest, historyListSuccess, historyListFailure } from \"features/history/reducer/historySlice\";\nimport { historyModifyRequest, historyModifySuccess, historyModifyFailure } from \"features/history/reducer/historySlice\";\nimport { historyAutoAddRequest, historyAutoAddSuccess, historyAutoAddFailure } from \"features/history/reducer/historySlice\";\nimport { historyAPI } from \"features/history\";\n\nfunction* create(action) {\n  try {\n    const result = yield call(historyAPI.createAPI, action.payload);\n    console.log(`title :: ${JSON.stringify(result)}`);\n    yield put(historySuccess(result));\n    console.log(`saga return :: ${JSON.stringify(result['data'])}`);\n\n    if (result.data.log_type != \"todo\") {\n      window.location.href = \"/history/history\";\n    }\n  } catch (error) {\n    yield put(historyFailure(error));\n    alert(`ERROR :: ${error}`);\n  }\n}\n\nexport function* watchCreate() {\n  yield takeLatest(historyRequest.type, create);\n} //리스트\n\nfunction* list(action) {\n  // alert('# 3 SAGA - historyRequest')\n  try {\n    const result = yield call(historyAPI.listAPI, action.payload); // alert('# 5 SAGA success - historyRequest')\n\n    yield put(historyListSuccess(result));\n    window.localStorage.setItem('sessionHistory', JSON.stringify(result.data));\n  } catch (error) {\n    yield put(historyListFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryList() {\n  yield takeLatest(historyListRequest.type, list);\n} //수정\n\nfunction* modify(action) {\n  try {\n    const result = yield call(historyAPI.modifyAPI, action.payload);\n    yield put(historyModifySuccess(result));\n    window.location.href = \"/history/history\";\n  } catch (error) {\n    yield put(historyModifyFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryModify() {\n  yield takeLatest(historyModifyRequest.type, modify);\n} //자동 기록 추가\n\nfunction* autoAdd(action) {\n  try {\n    const result = yield call(historyAPI.autoAddAPI, action.payload);\n    yield put(historyAutoAddSuccess(result));\n    window.location.href = \"/history/history\";\n  } catch (error) {\n    yield put(historyAutoAddFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryAutoAdd() {\n  yield takeLatest(historyAutoAddRequest.type, autoAdd);\n} // 삭제\n\nfunction* remove(action) {\n  try {\n    const result = yield call(historyAPI.removeAPI, action.payload);\n    yield put(historyRemoveSuccess(result));\n    location.reload();\n  } catch (error) {\n    yield put(historyRemoveFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryRemove() {\n  yield takeLatest(historyRemoveRequest.type, remove);\n} // 삭제\n\nfunction* removeFromTodo(action) {\n  try {\n    const result = yield call(historyAPI.removeFromTodoAPI, action.payload);\n    yield put(historyRemoveFromTodoSuccess(result));\n    location.reload();\n  } catch (error) {\n    yield put(historyRemoveFromTodoFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryRemoveFromTodo() {\n  yield takeLatest(historyRemoveFromTodoRequest.type, removeFromTodo);\n}","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis/jarviis-msa-front-for-merge/src/features/history/module/historySaga.ts"],"names":["call","put","takeLatest","historyFailure","historyRemoveFailure","historyRemoveFromTodoFailure","historyRemoveFromTodoRequest","historyRemoveFromTodoSuccess","historyRemoveRequest","historyRemoveSuccess","historyRequest","historySuccess","historyListRequest","historyListSuccess","historyListFailure","historyModifyRequest","historyModifySuccess","historyModifyFailure","historyAutoAddRequest","historyAutoAddSuccess","historyAutoAddFailure","historyAPI","create","action","result","createAPI","payload","console","log","JSON","stringify","data","log_type","window","location","href","error","alert","watchCreate","type","list","listAPI","localStorage","setItem","watchHistoryList","modify","modifyAPI","watchHistoryModify","autoAdd","autoAddAPI","watchHistoryAutoAdd","remove","removeAPI","reload","watchHistoryRemove","removeFromTodo","removeFromTodoAPI","watchHistoryRemoveFromTodo"],"mappings":"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","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { HistoryDataPayload, historyFailure, HistoryPayload, historyRemoveFailure, historyRemoveFromTodoFailure, historyRemoveFromTodoRequest, historyRemoveFromTodoSuccess, HistoryRemovePayload, historyRemoveRequest, historyRemoveSuccess, historyRequest, historySuccess, ListDataPayload } from \"features/history/reducer/historySlice\";\nimport { historyListRequest, historyListSuccess, historyListFailure } from \"features/history/reducer/historySlice\"\nimport { HistoryModifyPayload, historyModifyRequest, historyModifySuccess, historyModifyFailure } from \"features/history/reducer/historySlice\";\nimport { historyAutoAddRequest, historyAutoAddSuccess, historyAutoAddFailure } from \"features/history/reducer/historySlice\";\nimport { historyAPI } from \"features/history\";\n\nfunction* create(action: PayloadAction<HistoryPayload>) {\n    try {\n        const result: HistoryDataPayload = yield call(\n            historyAPI.createAPI,\n            action.payload\n        );\n        console.log(`title :: ${JSON.stringify(result)}`)\n        yield put(historySuccess(result));\n        console.log(`saga return :: ${JSON.stringify(result['data'])}`)\n        if (result.data.log_type != \"todo\") {\n            window.location.href = \"/history/history\"\n        }\n        \n    } catch (error: any) {\n        yield put(historyFailure(error))\n        alert(`ERROR :: ${error}`)\n    }\n}\n\nexport function* watchCreate() {\n    yield takeLatest(historyRequest.type, create);\n}\n//리스트\nfunction* list(action: PayloadAction<ListDataPayload>) {\n    // alert('# 3 SAGA - historyRequest')\n    try {\n        const result: HistoryDataPayload = yield call(\n            historyAPI.listAPI,\n            action.payload\n        );\n        // alert('# 5 SAGA success - historyRequest')\n        yield put(historyListSuccess(result));\n        window.localStorage.setItem('sessionHistory', JSON.stringify(result.data))\n\n    } catch (error: any) {\n        yield put(historyListFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchHistoryList() {\n    yield takeLatest(historyListRequest.type, list);\n}\n//수정\nfunction* modify(action: PayloadAction<HistoryModifyPayload>) {\n    try {\n        const result: HistoryModifyPayload = yield call(\n            historyAPI.modifyAPI,\n            action.payload\n        );\n        yield put(historyModifySuccess(result));\n        window.location.href = \"/history/history\"\n    } catch (error: any) {\n        yield put(historyModifyFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchHistoryModify() {\n    yield takeLatest(historyModifyRequest.type, modify);\n}\n\n//자동 기록 추가\nfunction* autoAdd(action: PayloadAction<HistoryDataPayload>) {\n    try {\n        const result: HistoryDataPayload = yield call(\n            historyAPI.autoAddAPI,\n            action.payload\n        );\n        yield put(historyAutoAddSuccess(result));\n        window.location.href = \"/history/history\"\n    } catch (error: any) {\n        yield put(historyAutoAddFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchHistoryAutoAdd() {\n    yield takeLatest(historyAutoAddRequest.type, autoAdd);\n}\n// 삭제\nfunction* remove(action: PayloadAction<HistoryRemovePayload>) {\n    try {\n        const result: HistoryRemovePayload = yield call(\n            historyAPI.removeAPI,\n            action.payload\n        );\n        yield put(historyRemoveSuccess(result));\n        location.reload()\n        \n    } catch (error: any) {\n        yield put(historyRemoveFailure(error))\n        alert(error)\n    }\n}\nexport function* watchHistoryRemove() {\n    yield takeLatest(historyRemoveRequest.type, remove);\n}\n// 삭제\nfunction* removeFromTodo(action: PayloadAction<HistoryRemovePayload>) {\n    try {\n        const result: HistoryRemovePayload = yield call(\n            historyAPI.removeFromTodoAPI,\n            action.payload\n        );\n        yield put(historyRemoveFromTodoSuccess(result));\n        location.reload()\n        \n    } catch (error: any) {\n        yield put(historyRemoveFromTodoFailure(error))\n        alert(error)\n    }\n}\nexport function* watchHistoryRemoveFromTodo() {\n    yield takeLatest(historyRemoveFromTodoRequest.type, removeFromTodo);\n}"]},"metadata":{},"sourceType":"module"}