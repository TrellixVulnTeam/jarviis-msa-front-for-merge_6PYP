{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport gardenAPI from \"../reducer/gardenAPI\";\nimport { flowerListFailure, flowerListRequest, flowerListSuccess } from \"../reducer/gardenSlice\"; //리스트\n\nfunction* list(action) {\n  try {\n    // alert(\"SAGA!\")\n    const result = yield call(gardenAPI.listAPI, action.payload);\n    yield put(flowerListSuccess(result));\n  } catch (error) {\n    yield put(flowerListFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchFlowerList() {\n  yield takeLatest(flowerListRequest.type, list);\n}","map":{"version":3,"sources":["C:/자비스 주현/jarviis_docker/jarviis_docker/front/src/features/review/module/gardenSaga.ts"],"names":["call","put","takeLatest","gardenAPI","flowerListFailure","flowerListRequest","flowerListSuccess","list","action","result","listAPI","payload","error","alert","watchFlowerList","type"],"mappings":"AACA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAA6CC,iBAA7C,EAAgEC,iBAAhE,EAAmFC,iBAAnF,QAA4G,wBAA5G,C,CAGA;;AACA,UAAUC,IAAV,CAAeC,MAAf,EAAuD;AACnD,MAAI;AACA;AACA,UAAMC,MAAyB,GAAG,MAAMT,IAAI,CACxCG,SAAS,CAACO,OAD8B,EAExCF,MAAM,CAACG,OAFiC,CAA5C;AAIA,UAAMV,GAAG,CAACK,iBAAiB,CAACG,MAAD,CAAlB,CAAT;AACH,GAPD,CAOE,OAAOG,KAAP,EAAmB;AACjB,UAAMX,GAAG,CAACG,iBAAiB,CAACQ,KAAD,CAAlB,CAAT;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ;;AAED,OAAO,UAAUE,eAAV,GAA4B;AAC/B,QAAMZ,UAAU,CAACG,iBAAiB,CAACU,IAAnB,EAAyBR,IAAzB,CAAhB;AACH","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport gardenAPI from \"../reducer/gardenAPI\";\nimport { FlowerDataPayload, FlowerIdPayload, flowerListFailure, flowerListRequest, flowerListSuccess } from \"../reducer/gardenSlice\";\n\n\n//리스트\nfunction* list(action: PayloadAction<FlowerIdPayload>) {\n    try {\n        // alert(\"SAGA!\")\n        const result: FlowerDataPayload = yield call(\n            gardenAPI.listAPI,\n            action.payload\n        );\n        yield put(flowerListSuccess(result));\n    } catch (error: any) {\n        yield put(flowerListFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchFlowerList() {\n    yield takeLatest(flowerListRequest.type, list);\n}"]},"metadata":{},"sourceType":"module"}