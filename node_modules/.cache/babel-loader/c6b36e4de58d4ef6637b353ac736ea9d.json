{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  historyLoading: false,\n  historyData: null,\n  historyTodo: null,\n  error: null\n};\nconst historySlice = createSlice({\n  name: \"histories\",\n  initialState,\n  reducers: {\n    historyRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historySuccess(state, action) {\n      state.historyLoading = false;\n      alert(`성공한 데이터 :: ${JSON.stringify(action.payload)}`);\n\n      if (action.payload.data.log_type == \"todo\") {\n        alert(`투두 데이터 확인! :: ${JSON.stringify(action.payload)}`);\n        state.historyTodo = action.payload;\n      } else {\n        state.historyData = action.payload;\n      }\n    },\n\n    historyFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    //리스트\n    historyListRequest(state, _action) {\n      // alert('# 2 slice - historyRequest'),\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyListSuccess(state, action) {\n      // alert('# 6 success')\n      state.historyLoading = false;\n      state.historyData = action.payload;\n    },\n\n    historyListFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 수정\n    historyModifyRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyModifySuccess(state, action) {\n      state.historyLoading = false;\n    },\n\n    historyModifyFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 기록 자동 추가\n    historyAutoAddRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyAutoAddSuccess(state, action) {\n      state.historyLoading = false;\n    },\n\n    historyAutoAddFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 삭제\n    historyRemoveRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyRemoveSuccess(state, action) {\n      state.historyLoading = false;\n    },\n\n    historyRemoveFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 삭제\n    historyRemoveFromTodoRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyRemoveFromTodoSuccess(state, action) {\n      state.historyLoading = false;\n    },\n\n    historyRemoveFromTodoFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    history: historySlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = historySlice;\nexport const {\n  historyRequest,\n  historySuccess,\n  historyFailure,\n  historyListRequest,\n  historyListSuccess,\n  historyListFailure,\n  historyModifyRequest,\n  historyModifySuccess,\n  historyModifyFailure,\n  historyAutoAddRequest,\n  historyAutoAddSuccess,\n  historyAutoAddFailure,\n  historyRemoveRequest,\n  historyRemoveSuccess,\n  historyRemoveFailure,\n  historyRemoveFromTodoRequest,\n  historyRemoveFromTodoSuccess,\n  historyRemoveFromTodoFailure\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis/jarviis-msa-front-for-merge/src/features/history/reducer/historySlice.ts"],"names":["configureStore","createSlice","initialState","historyLoading","historyData","historyTodo","error","historySlice","name","reducers","historyRequest","state","_action","historySuccess","action","alert","JSON","stringify","payload","data","log_type","historyFailure","historyListRequest","historyListSuccess","historyListFailure","historyModifyRequest","historyModifySuccess","historyModifyFailure","historyAutoAddRequest","historyAutoAddSuccess","historyAutoAddFailure","historyRemoveRequest","historyRemoveSuccess","historyRemoveFailure","historyRemoveFromTodoRequest","historyRemoveFromTodoSuccess","historyRemoveFromTodoFailure","store","reducer","history","actions"],"mappings":"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","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n\nexport interface HistoryDataPayload {\n    // id: number\n    // log_type: string,\n    // contents: string,\n    // location: string,\n    // address: string,\n    // log_date: string,\n    // weather: string,\n    data: {\n        id: number;\n        x: string;\n        y: string;\n        location: string;\n        address: string;\n        log_date: string;\n        weather: string;\n        log_type: string;\n        contents: string;\n        event_id: number;\n        user_id: number;\n\n    }\n}\n\nexport interface ListDataPayload {\n    data: {\n        user_id: number;\n        date: string;\n    }\n\n}\n\nexport interface HistoryPayload {\n    id: number;\n    location: string;\n    address: string;\n    log_date: string;\n    weather: string;\n    log_type: string;\n    contents: string;\n    event_id: number;\n    user_id: number;\n}\n\nexport interface HistoryModifyPayload {\n    id: string,\n    user_id: string,\n    log_type: string,\n    contents: string,\n    location: string,\n    address: string,\n    log_date: string,\n    weather: string,\n}\nexport interface HistoryRemovePayload {\n    id: number,\n}\nexport interface HistoryState {\n    historyLoading: boolean;\n    historyData: any;\n    historyTodo: any;\n    error: any;\n}\n\nexport interface ParamType {\n    id: number;\n}\nconst initialState: HistoryState = {\n    historyLoading: false,\n    historyData: null,\n    historyTodo: null,\n    error: null,\n};\n\nconst historySlice = createSlice({\n    name: \"histories\",\n    initialState,\n    reducers: {\n        historyRequest(state: HistoryState, _action: PayloadAction<HistoryPayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historySuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>) {\n            state.historyLoading = false;\n            alert(`성공한 데이터 :: ${JSON.stringify(action.payload)}`)\n            if (action.payload.data.log_type == \"todo\") {\n                alert(`투두 데이터 확인! :: ${JSON.stringify(action.payload)}`)\n                state.historyTodo = action.payload;\n            }\n            else{\n                state.historyData = action.payload;\n            }\n        },\n        historyFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n    \n        //리스트\n        historyListRequest(state: HistoryState, _action: PayloadAction<ListDataPayload>) {\n            // alert('# 2 slice - historyRequest'),\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyListSuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>) {\n            // alert('# 6 success')\n            state.historyLoading = false;\n            state.historyData = action.payload;\n        },\n        historyListFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 수정\n        historyModifyRequest(state: HistoryState, _action: PayloadAction<HistoryModifyPayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyModifySuccess(state: HistoryState, action: PayloadAction<HistoryModifyPayload>) {\n            state.historyLoading = false;\n        },\n        historyModifyFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 기록 자동 추가\n        historyAutoAddRequest(state: HistoryState, _action: PayloadAction<HistoryDataPayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyAutoAddSuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>) {\n            state.historyLoading = false;\n        },\n        historyAutoAddFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 삭제\n        historyRemoveRequest(state: HistoryState, _action: PayloadAction<HistoryRemovePayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyRemoveSuccess(state: HistoryState, action: PayloadAction<HistoryRemovePayload>) {\n            state.historyLoading = false;\n        },\n        historyRemoveFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 삭제\n        historyRemoveFromTodoRequest(state: HistoryState, _action: PayloadAction<HistoryRemovePayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyRemoveFromTodoSuccess(state: HistoryState, action: PayloadAction<HistoryRemovePayload>) {\n            state.historyLoading = false;\n        },\n        historyRemoveFromTodoFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        }\n\n    }\n})\n\n\nconst store = configureStore({\n    reducer: {\n        history: historySlice.reducer,\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = historySlice;\n\nexport const {\n    historyRequest,\n    historySuccess,\n    historyFailure,\n    historyListRequest,\n    historyListSuccess,\n    historyListFailure,\n    historyModifyRequest,\n    historyModifySuccess,\n    historyModifyFailure,\n    historyAutoAddRequest,\n    historyAutoAddSuccess,\n    historyAutoAddFailure,\n    historyRemoveRequest,\n    historyRemoveSuccess,\n    historyRemoveFailure,\n    historyRemoveFromTodoRequest,\n    historyRemoveFromTodoSuccess,\n    historyRemoveFromTodoFailure\n} = actions;\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}