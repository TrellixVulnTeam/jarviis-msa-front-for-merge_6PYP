{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { loginRequest, loginFailure, loginSuccess, joinSuccess, joinFailure, joinRequest, existSuccess, existFailure, existRequest, modifySuccess, modifyFailure, modifyRequest, deleteRequest, deleteSuccess } from \"features/user/reducer/userSlice\";\nimport { userAPI } from \"features/user\";\n\nfunction* remove(action) {\n  try {\n    const result = yield call(userAPI.removeAPI, action.payload);\n    yield put(deleteSuccess(result));\n    localStorage.clear();\n    alert(\"필요하시면 다시 돌아오세요🤖\");\n    window.location.href = \"/home\";\n  } catch (error) {\n    yield put(modifyFailure(error));\n  }\n}\n\nfunction* exist(action) {\n  try {\n    const result = yield call(userAPI.existAPI, action.payload);\n    yield put(existSuccess(result));\n    alert(\"가능한 아이디입니다.\");\n  } catch (error) {\n    yield put(existFailure(error));\n    alert(\"쓸수없는 아이디입니다.\");\n  }\n}\n\nfunction* join(action) {\n  try {\n    const result = yield call(userAPI.joinAPI, action.payload);\n    yield put(joinSuccess(result));\n    window.location.href = 'users/login';\n    alert(\"🎄회원가입을 축하드립니다🎄\");\n  } catch (error) {\n    yield put(joinFailure(error));\n    alert(\"정보를 다시 수정해주세요😥\");\n  }\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(userAPI.loginAPI, action.payload);\n    yield put(loginSuccess(result));\n    window.localStorage.setItem('sessionUser', JSON.stringify(result.data));\n    window.location.href = \"/home\";\n  } catch (error) {\n    alert(\"아이디 혹은 비밀번호가 틀렸습니다😞\");\n    yield put(loginFailure(error));\n  }\n}\n\nfunction* modify(action) {\n  try {\n    const result = yield call(userAPI.modifyAPI, action.payload);\n    yield put(modifySuccess(result));\n    window.localStorage.setItem('sessionUser', JSON.parse(JSON.stringify(result.config.data)));\n    alert(\"수정이 완료되었습니다✔️\");\n    window.location.href = \"/mypage/setting\";\n  } catch (error) {\n    // alert(\"아이디오류\")\n    yield put(modifyFailure(error));\n  }\n} // Watch 함수\n\n\nexport function* watchLogin() {\n  yield takeLatest(loginRequest.type, login);\n}\nexport function* watchJoin() {\n  yield takeLatest(joinRequest.type, join);\n}\nexport function* watchExist() {\n  yield takeLatest(existRequest.type, exist);\n}\nexport function* watchModify() {\n  yield takeLatest(modifyRequest.type, modify);\n}\nexport function* watchRemove() {\n  yield takeLatest(deleteRequest.type, remove);\n}","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis/jarviis-msa-front-for-merge/src/features/user/module/userSaga.ts"],"names":["call","put","takeLatest","loginRequest","loginFailure","loginSuccess","joinSuccess","joinFailure","joinRequest","existSuccess","existFailure","existRequest","modifySuccess","modifyFailure","modifyRequest","deleteRequest","deleteSuccess","userAPI","remove","action","result","removeAPI","payload","localStorage","clear","alert","window","location","href","error","exist","existAPI","join","joinAPI","login","loginAPI","setItem","JSON","stringify","data","modify","modifyAPI","parse","config","watchLogin","type","watchJoin","watchExist","watchModify","watchRemove"],"mappings":"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","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, delay, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  LoginPayload,\n  UserDataPayload,\n  loginRequest,\n  loginFailure,\n  loginSuccess,\n  JoinPayload,\n  joinSuccess,\n  joinFailure,\n  joinRequest,\n  ExistPayload,\n  existSuccess,\n  existFailure,\n  existRequest,\n  ModifyPayload,\n  modifySuccess,\n  modifyFailure,\n  modifyRequest,\n  UserLoginDataPayload,\n  UserModifyDataPayload,\n  deleteRequest,\n  RemovePayload,\n  deleteSuccess,\n} from \"features/user/reducer/userSlice\";\nimport { userAPI } from \"features/user\";\n\nfunction* remove(action: PayloadAction<RemovePayload>) {\n  try {\n    const result: UserDataPayload = yield call(\n      userAPI.removeAPI,\n      action.payload\n    );\n    yield put(deleteSuccess(result));\n    localStorage.clear()\n    alert(\"필요하시면 다시 돌아오세요🤖\")\n    window.location.href = \"/home\"\n\n  } catch (error: any) {\n    yield put(modifyFailure(error));\n  }\n}\n\nfunction* exist(action: PayloadAction<ExistPayload>) {\n  try {\n    const result: UserDataPayload = yield call(\n      userAPI.existAPI,\n      action.payload\n    );\n    yield put(existSuccess(result));\n    alert(\"가능한 아이디입니다.\")\n  } catch (error: any) {\n    yield put(existFailure(error))\n    alert(\"쓸수없는 아이디입니다.\")\n  }\n}\n\n\n  function* join(action: PayloadAction<JoinPayload>) {\n    try {\n      \n      const result: UserDataPayload = yield call(\n        userAPI.joinAPI,\n        action.payload\n      );\n      yield put(joinSuccess(result));\n      window.location.href = 'users/login'\n      alert(\"🎄회원가입을 축하드립니다🎄\")\n    } catch (error: any) {\n      yield put(joinFailure(error));\n      alert(\"정보를 다시 수정해주세요😥\")\n    }\n  }\n  function* login(action: PayloadAction<LoginPayload>) {\n    try {\n      const result: UserLoginDataPayload = yield call(\n        userAPI.loginAPI,\n        action.payload\n      );\n      yield put(loginSuccess(result));\n      window.localStorage.setItem('sessionUser', JSON.stringify(result.data))\n      window.location.href = \"/home\"\n    } catch (error: any) {\n      alert(\"아이디 혹은 비밀번호가 틀렸습니다😞\")\n      yield put(loginFailure(error));\n    }\n  }\n  function* modify(action: PayloadAction<ModifyPayload>) {\n    try {\n      const result: UserModifyDataPayload = yield call(\n        userAPI.modifyAPI,\n        action.payload\n      );\n      yield put(modifySuccess(result));\n      window.localStorage.setItem('sessionUser', JSON.parse(JSON.stringify(result.config.data)))\n      alert(\"수정이 완료되었습니다✔️\")\n      window.location.href = \"/mypage/setting\"\n\n\n    } catch (error: any) {\n      // alert(\"아이디오류\")\n      yield put(modifyFailure(error));\n    }\n  }\n\n  // Watch 함수\n  export function* watchLogin() {\n    yield takeLatest(loginRequest.type, login);\n  }\n  export function* watchJoin() {\n    yield takeLatest(joinRequest.type, join);\n  }\n  export function* watchExist() {\n    yield takeLatest(existRequest.type, exist);\n  }\n  export function* watchModify() {\n    yield takeLatest(modifyRequest.type, modify);\n  }\n  export function* watchRemove() {\n    yield takeLatest(deleteRequest.type, remove);\n  }"]},"metadata":{},"sourceType":"module"}