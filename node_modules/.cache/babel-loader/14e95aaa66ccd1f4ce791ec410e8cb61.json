{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  historyLoading: false,\n  historyData: null,\n  error: null\n};\nconst historySlice = createSlice({\n  name: \"histories\",\n  initialState,\n  reducers: {\n    historyRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historySuccess(state, action) {\n      state.historyLoading = false;\n      state.historyData = action.payload;\n    },\n\n    historyFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 투두 히스토리\n    historyTodoRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyTodoSuccess(state, action) {\n      state.historyLoading = false;\n      state.historyData = action.payload;\n    },\n\n    historyTodoFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    //리스트\n    historyListRequest(state, _action) {\n      alert('# 2 slice - historyRequest'), state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyListSuccess(state, action) {\n      alert('# 6 success');\n      state.historyLoading = false;\n      state.historyData = action.payload;\n    },\n\n    historyListFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 수정\n    historyModifyRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyModifySuccess(state, action) {\n      state.historyLoading = false;\n    },\n\n    historyModifyFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 기록 자동 추가\n    historyAutoAddRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyAutoAddSuccess(state, action) {\n      state.historyLoading = false;\n    },\n\n    historyAutoAddFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    },\n\n    // 삭제\n    historyRemoveRequest(state, _action) {\n      state.historyLoading = true;\n      state.error = null;\n    },\n\n    historyRemoveSuccess(state, action) {\n      state.historyLoading = false;\n    },\n\n    historyRemoveFailure(state, action) {\n      state.historyLoading = true;\n      state.error = action.payload;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    history: historySlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = historySlice;\nexport const {\n  historyRequest,\n  historySuccess,\n  historyFailure,\n  historyListRequest,\n  historyListSuccess,\n  historyListFailure,\n  historyModifyRequest,\n  historyModifySuccess,\n  historyModifyFailure,\n  historyAutoAddRequest,\n  historyAutoAddSuccess,\n  historyAutoAddFailure,\n  historyRemoveRequest,\n  historyRemoveSuccess,\n  historyRemoveFailure,\n  historyTodoRequest,\n  historyTodoSuccess,\n  historyTodoFailure\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/자비스 임시/jarviis_docker/front/src/features/history/reducer/historySlice.ts"],"names":["configureStore","createSlice","initialState","historyLoading","historyData","error","historySlice","name","reducers","historyRequest","state","_action","historySuccess","action","payload","historyFailure","historyTodoRequest","historyTodoSuccess","historyTodoFailure","historyListRequest","alert","historyListSuccess","historyListFailure","historyModifyRequest","historyModifySuccess","historyModifyFailure","historyAutoAddRequest","historyAutoAddSuccess","historyAutoAddFailure","historyRemoveRequest","historyRemoveSuccess","historyRemoveFailure","store","reducer","history","actions"],"mappings":"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","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n\nexport interface HistoryDataPayload {\n    // id: number\n    // log_type: string,\n    // contents: string,\n    // location: string,\n    // address: string,\n    // log_date: string,\n    // weather: string,\n    data: [{\n        id: number;\n        x: string;\n        y: string;\n        location: string;\n        address: string;\n        log_date: string;\n        weather: string;\n        log_type: string;\n        contents: string;\n        user_id: number;\n\n    }]\n}\n\nexport interface ListDataPayload {\n    data: {\n        user_id: number;\n        date: string;\n    }\n\n}\n\nexport interface HistoryPayload {\n    id: number;\n    location: string;\n    address: string;\n    log_date: string;\n    weather: string;\n    log_type: string;\n    contents: string;\n    user_id: number;\n}\n\nexport interface HistoryModifyPayload {\n    id: string,\n    user_id: string,\n    log_type: string,\n    contents: string,\n    location: string,\n    address: string,\n    log_date: string,\n    weather: string,\n}\nexport interface HistoryRemovePayload {\n    id: number,\n}\nexport interface HistoryState {\n    historyLoading: boolean;\n    historyData: any;\n    error: any;\n}\n\nexport interface ParamType {\n    id: number;\n}\nconst initialState: HistoryState = {\n    historyLoading: false,\n    historyData: null,\n    error: null,\n};\n\nconst historySlice = createSlice({\n    name: \"histories\",\n    initialState,\n    reducers: {\n        historyRequest(state: HistoryState, _action: PayloadAction<HistoryPayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historySuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>) {\n            state.historyLoading = false;\n            state.historyData = action.payload;\n        },\n        historyFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 투두 히스토리\n        historyTodoRequest(state: HistoryState, _action: PayloadAction<HistoryPayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyTodoSuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>) {\n            state.historyLoading = false;\n            state.historyData = action.payload;\n        },\n        historyTodoFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        //리스트\n        historyListRequest(state: HistoryState, _action: PayloadAction<ListDataPayload>) {\n            alert('# 2 slice - historyRequest'),\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyListSuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>) {\n            alert('# 6 success')\n            state.historyLoading = false;\n            state.historyData = action.payload;\n        },\n        historyListFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 수정\n        historyModifyRequest(state: HistoryState, _action: PayloadAction<HistoryModifyPayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyModifySuccess(state: HistoryState, action: PayloadAction<HistoryModifyPayload>) {\n            state.historyLoading = false;\n        },\n        historyModifyFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 기록 자동 추가\n        historyAutoAddRequest(state: HistoryState, _action: PayloadAction<HistoryDataPayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyAutoAddSuccess(state: HistoryState, action: PayloadAction<HistoryDataPayload>) {\n            state.historyLoading = false;\n        },\n        historyAutoAddFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        },\n        // 삭제\n        historyRemoveRequest(state: HistoryState, _action: PayloadAction<HistoryRemovePayload>) {\n            state.historyLoading = true;\n            state.error = null;\n        },\n        historyRemoveSuccess(state: HistoryState, action: PayloadAction<HistoryRemovePayload>) {\n            state.historyLoading = false;\n        },\n        historyRemoveFailure(state: HistoryState, action: PayloadAction<{ error: any }>) {\n            state.historyLoading = true;\n            state.error = action.payload;\n        }\n\n    }\n})\n\n\nconst store = configureStore({\n    reducer: {\n        history: historySlice.reducer,\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = historySlice;\n\nexport const {\n    historyRequest,\n    historySuccess,\n    historyFailure,\n    historyListRequest,\n    historyListSuccess,\n    historyListFailure,\n    historyModifyRequest,\n    historyModifySuccess,\n    historyModifyFailure,\n    historyAutoAddRequest,\n    historyAutoAddSuccess,\n    historyAutoAddFailure,\n    historyRemoveRequest,\n    historyRemoveSuccess,\n    historyRemoveFailure,\n    historyTodoRequest,\n    historyTodoSuccess,\n    historyTodoFailure\n} = actions;\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}