{"ast":null,"code":"import { taskRequest, taskSuccess, taskFailure, CompleteSuccess, CompleteFailure, CompleteRequest, addTaskSuccess, addTaskFailure, addTaskRequest, deleteTaskSuccess, deleteTaskFailure, deleteTaskRequest } from \"features/todo/reducer/taskSlice\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { taskAPI } from \"features/todo\";\n\nfunction* taskList(action) {\n  try {\n    const result = yield call(taskAPI.taskAPI, action.payload);\n    yield put(taskSuccess(result));\n  } catch (error) {\n    yield put(taskFailure(error));\n  }\n\n  ;\n}\n\nfunction* taskComplete(action) {\n  try {\n    const result = yield call(taskAPI.completeAPI, action.payload);\n    yield put(CompleteSuccess(result));\n  } catch (error) {\n    yield put(CompleteFailure(error));\n  }\n\n  ;\n}\n\nfunction* addTask(action) {\n  try {\n    const result = yield call(taskAPI.addTaskAPI, action.payload);\n    yield put(addTaskSuccess(result));\n    location.reload();\n  } catch (error) {\n    yield put(addTaskFailure(error));\n  }\n\n  ;\n}\n\nfunction* deleteTask(action) {\n  try {\n    const result = yield call(taskAPI.deleteTaskAPI, action.payload);\n    yield put(deleteTaskSuccess(result));\n    location.reload();\n  } catch (error) {\n    yield put(deleteTaskFailure(error));\n  }\n\n  ;\n}\n\nexport function* wathchTaskList() {\n  yield takeLatest(taskRequest.type, taskList);\n}\nexport function* watchTaskComplete() {\n  yield takeLatest(CompleteRequest.type, taskComplete);\n}\nexport function* watchAddTask() {\n  yield takeLatest(addTaskRequest.type, addTask);\n}\nexport function* watchDeleteTask() {\n  yield takeLatest(deleteTaskRequest.type, deleteTask);\n}","map":{"version":3,"sources":["C:/Users/seosuwan/Desktop/team/jarviis-msa-front-for-merge/src/features/todo/module/taskSaga.ts"],"names":["taskRequest","taskSuccess","taskFailure","CompleteSuccess","CompleteFailure","CompleteRequest","addTaskSuccess","addTaskFailure","addTaskRequest","deleteTaskSuccess","deleteTaskFailure","deleteTaskRequest","call","put","takeLatest","taskAPI","taskList","action","result","payload","error","taskComplete","completeAPI","addTask","addTaskAPI","location","reload","deleteTask","deleteTaskAPI","wathchTaskList","type","watchTaskComplete","watchAddTask","watchDeleteTask"],"mappings":"AACA,SAAoBA,WAApB,EAAiCC,WAAjC,EAA8CC,WAA9C,EACoCC,eADpC,EACqDC,eADrD,EACsEC,eADtE,EACuGC,cADvG,EACuHC,cADvH,EACuIC,cADvI,EACuJC,iBADvJ,EAC0KC,iBAD1K,EAC6LC,iBAD7L,QACsN,iCADtN;AAEA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAGA,UAAUC,QAAV,CAAmBC,MAAnB,EAAoD;AAChD,MAAI;AACA,UAAMC,MAA2B,GAAG,MAAMN,IAAI,CAC1CG,OAAO,CAACA,OADkC,EAE1CE,MAAM,CAACE,OAFmC,CAA9C;AAIA,UAAMN,GAAG,CAACZ,WAAW,CAACiB,MAAD,CAAZ,CAAT;AACH,GAND,CAOA,OAAOE,KAAP,EAAiB;AACb,UAAMP,GAAG,CAACX,WAAW,CAACkB,KAAD,CAAZ,CAAT;AACH;;AAAA;AACJ;;AAED,UAAUC,YAAV,CAAuBJ,MAAvB,EAAgE;AAC5D,MAAI;AACA,UAAMC,MAAyB,GAAG,MAAMN,IAAI,CACxCG,OAAO,CAACO,WADgC,EAExCL,MAAM,CAACE,OAFiC,CAA5C;AAIA,UAAMN,GAAG,CAACV,eAAe,CAACe,MAAD,CAAhB,CAAT;AACH,GAND,CAOA,OAAOE,KAAP,EAAiB;AACb,UAAMP,GAAG,CAACT,eAAe,CAACgB,KAAD,CAAhB,CAAT;AACH;;AAAA;AACJ;;AAED,UAAUG,OAAV,CAAkBN,MAAlB,EAAwD;AACpD,MAAI;AACA,UAAMC,MAAsB,GAAG,MAAMN,IAAI,CACrCG,OAAO,CAACS,UAD6B,EAErCP,MAAM,CAACE,OAF8B,CAAzC;AAIA,UAAMN,GAAG,CAACP,cAAc,CAACY,MAAD,CAAf,CAAT;AACAO,IAAAA,QAAQ,CAACC,MAAT;AACH,GAPD,CAQA,OAAON,KAAP,EAAiB;AACb,UAAMP,GAAG,CAACN,cAAc,CAACa,KAAD,CAAf,CAAT;AACH;;AAAA;AACJ;;AAED,UAAUO,UAAV,CAAqBV,MAArB,EAAwD;AACpD,MAAI;AACA,UAAMC,MAAmB,GAAG,MAAMN,IAAI,CAClCG,OAAO,CAACa,aAD0B,EAElCX,MAAM,CAACE,OAF2B,CAAtC;AAIA,UAAMN,GAAG,CAACJ,iBAAiB,CAACS,MAAD,CAAlB,CAAT;AACAO,IAAAA,QAAQ,CAACC,MAAT;AACH,GAPD,CAQA,OAAON,KAAP,EAAiB;AACb,UAAMP,GAAG,CAACH,iBAAiB,CAACU,KAAD,CAAlB,CAAT;AACH;;AAAA;AACJ;;AAID,OAAO,UAAUS,cAAV,GAA0B;AAC7B,QAAMf,UAAU,CAACd,WAAW,CAAC8B,IAAb,EAAmBd,QAAnB,CAAhB;AACH;AAED,OAAO,UAAUe,iBAAV,GAA6B;AAChC,QAAMjB,UAAU,CAACT,eAAe,CAACyB,IAAjB,EAAuBT,YAAvB,CAAhB;AACH;AAED,OAAO,UAAUW,YAAV,GAAwB;AAC3B,QAAMlB,UAAU,CAACN,cAAc,CAACsB,IAAhB,EAAsBP,OAAtB,CAAhB;AACH;AAED,OAAO,UAAUU,eAAV,GAA2B;AAC9B,QAAMnB,UAAU,CAACH,iBAAiB,CAACmB,IAAnB,EAAyBH,UAAzB,CAAhB;AACH","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { ParamType, taskRequest, taskSuccess, taskFailure, taskListDataPayload, \n    idParamType, completionPayload, CompleteSuccess, CompleteFailure, CompleteRequest, addTaskPayload, addTaskSuccess, addTaskFailure, addTaskRequest, deleteTaskSuccess, deleteTaskFailure, deleteTaskRequest } from \"features/todo/reducer/taskSlice\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { taskAPI } from \"features/todo\";\n\n\nfunction* taskList(action: PayloadAction<ParamType>){\n    try {\n        const result: taskListDataPayload = yield call(\n            taskAPI.taskAPI,\n            action.payload\n        );\n        yield put(taskSuccess(result));\n    }\n    catch (error:any){\n        yield put(taskFailure(error))\n    };\n}\n\nfunction* taskComplete(action: PayloadAction<completionPayload>){\n    try {\n        const result: completionPayload = yield call(\n            taskAPI.completeAPI,\n            action.payload\n        );\n        yield put(CompleteSuccess(result));\n    }\n    catch (error:any){\n        yield put(CompleteFailure(error))\n    };\n}\n\nfunction* addTask(action: PayloadAction<addTaskPayload>){\n    try {\n        const result: addTaskPayload = yield call(\n            taskAPI.addTaskAPI,\n            action.payload\n        );\n        yield put(addTaskSuccess(result));\n        location.reload()\n    }\n    catch (error:any){\n        yield put(addTaskFailure(error))\n    };\n}\n\nfunction* deleteTask(action: PayloadAction<idParamType>){\n    try {\n        const result: idParamType = yield call(\n            taskAPI.deleteTaskAPI,\n            action.payload\n        );\n        yield put(deleteTaskSuccess(result));\n        location.reload()\n    }\n    catch (error:any){\n        yield put(deleteTaskFailure(error))\n    };\n}\n\n\n\nexport function* wathchTaskList(){\n    yield takeLatest(taskRequest.type, taskList);\n}\n\nexport function* watchTaskComplete(){\n    yield takeLatest(CompleteRequest.type, taskComplete);\n}\n\nexport function* watchAddTask(){\n    yield takeLatest(addTaskRequest.type, addTask);\n}\n\nexport function* watchDeleteTask(){\n    yield takeLatest(deleteTaskRequest.type, deleteTask);\n}\n"]},"metadata":{},"sourceType":"module"}