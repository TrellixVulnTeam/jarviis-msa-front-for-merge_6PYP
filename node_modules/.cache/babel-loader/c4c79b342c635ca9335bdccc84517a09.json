{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { suggestionAPI } from \"features/suggestion\";\nimport { suggestionFailure, suggestionRequest, suggestionAcceptFailure, suggestionAcceptRequest, suggestionAcceptSuccess, suggestionSuccess, suggestionRejectRequest, suggestionRejectSuccess, suggestionRejectFailure } from \"../reducer/suggestionSlice\"; //리스트\n\nfunction* suggestionUser(action) {\n  // alert(\"suggestion saga action 감지\")\n  try {\n    const result = yield call(suggestionAPI.suggestionAPI, action.payload);\n    console.log('saga 실행'); // alert(`saga action 실행 후 alert ::: ${JSON.stringify(action.payload)}`)\n\n    yield put(suggestionSuccess(result)); // alert(\"suggestion saga 실행\")\n    // window.localStorage.setItem('sessionSuggestion', JSON.stringify(result.data)) \n  } catch (error) {\n    yield put(suggestionFailure(error));\n    alert(error);\n  }\n}\n\nfunction* accecpt(action) {\n  try {\n    const result = yield call(suggestionAPI.suggestionAcceptAPI, action.payload);\n    yield put(suggestionAcceptSuccess(result)); // window.location.href =''\n  } catch (error) {\n    yield put(suggestionAcceptFailure(error));\n    alert(error);\n  }\n}\n\nfunction* reject(action) {\n  try {\n    const result = yield call(suggestionAPI.suggestionRejectAPI, action.payload);\n    yield put(suggestionRejectSuccess(result)); // window.location.href =''\n  } catch (error) {\n    yield put(suggestionRejectFailure(error));\n    alert(error);\n  }\n}\n\nexport function* wacthSuggestion() {\n  yield takeLatest(suggestionRequest.type, suggestionUser);\n}\nexport function* wacthAccept() {\n  yield takeLatest(suggestionAcceptRequest.type, accecpt);\n}\nexport function* wacthReject() {\n  yield takeLatest(suggestionRejectRequest.type, reject);\n}","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis/jarviis-msa-front-for-merge/src/features/suggestion/module/suggestionSaga.ts"],"names":["call","put","takeLatest","suggestionAPI","suggestionFailure","suggestionRequest","suggestionAcceptFailure","suggestionAcceptRequest","suggestionAcceptSuccess","suggestionSuccess","suggestionRejectRequest","suggestionRejectSuccess","suggestionRejectFailure","suggestionUser","action","result","payload","console","log","error","alert","accecpt","suggestionAcceptAPI","reject","suggestionRejectAPI","wacthSuggestion","type","wacthAccept","wacthReject"],"mappings":"AACA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,iBAAT,EAA0EC,iBAA1E,EACEC,uBADF,EACoDC,uBADpD,EAC6EC,uBAD7E,EACsGC,iBADtG,EACyHC,uBADzH,EACkJC,uBADlJ,EAC2KC,uBAD3K,QAC0M,4BAD1M,C,CAIA;;AACA,UAAUC,cAAV,CAAyBC,MAAzB,EAAmE;AACjE;AACA,MAAI;AACA,UAAMC,MAAiC,GAAG,MAAMf,IAAI,CAClDG,aAAa,CAACA,aADoC,EAElDW,MAAM,CAACE,OAF2C,CAApD;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EALA,CAMA;;AACA,UAAMjB,GAAG,CAACQ,iBAAiB,CAACM,MAAD,CAAlB,CAAT,CAPA,CAQA;AACA;AAEH,GAXD,CAWE,OAAOI,KAAP,EAAmB;AACjB,UAAMlB,GAAG,CAACG,iBAAiB,CAACe,KAAD,CAAlB,CAAT;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACF;;AAED,UAAUE,OAAV,CAAkBP,MAAlB,EAAiE;AAC/D,MAAI;AACF,UAAMC,MAA+B,GAAG,MAAMf,IAAI,CAChDG,aAAa,CAACmB,mBADkC,EAEhDR,MAAM,CAACE,OAFyC,CAAlD;AAIA,UAAMf,GAAG,CAACO,uBAAuB,CAACO,MAAD,CAAxB,CAAT,CALE,CAMF;AACD,GAPD,CAOE,OAAOI,KAAP,EAAmB;AACnB,UAAMlB,GAAG,CAACK,uBAAuB,CAACa,KAAD,CAAxB,CAAT;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF;;AAED,UAAUI,MAAV,CAAiBT,MAAjB,EAAgE;AAC9D,MAAI;AACF,UAAMC,MAA+B,GAAG,MAAMf,IAAI,CAChDG,aAAa,CAACqB,mBADkC,EAEhDV,MAAM,CAACE,OAFyC,CAAlD;AAIA,UAAMf,GAAG,CAACU,uBAAuB,CAACI,MAAD,CAAxB,CAAT,CALE,CAMF;AACD,GAPD,CAOE,OAAOI,KAAP,EAAmB;AACnB,UAAMlB,GAAG,CAACW,uBAAuB,CAACO,KAAD,CAAxB,CAAT;AACAC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF;;AAED,OAAO,UAAUM,eAAV,GAA2B;AAChC,QAAMvB,UAAU,CAACG,iBAAiB,CAACqB,IAAnB,EAAyBb,cAAzB,CAAhB;AACD;AAED,OAAO,UAAUc,WAAV,GAAuB;AAC5B,QAAMzB,UAAU,CAACK,uBAAuB,CAACmB,IAAzB,EAA+BL,OAA/B,CAAhB;AACD;AAED,OAAO,UAAUO,WAAV,GAAuB;AAC5B,QAAM1B,UAAU,CAACQ,uBAAuB,CAACgB,IAAzB,EAA+BH,MAA/B,CAAhB;AACD","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { suggestionAPI } from \"features/suggestion\";\nimport { suggestionFailure, SuggestionListDataPayload, SuggestionPayload, suggestionRequest, \n  suggestionAcceptFailure, SuggestionResultPayload, suggestionAcceptRequest, suggestionAcceptSuccess, suggestionSuccess, suggestionRejectRequest, suggestionRejectSuccess, suggestionRejectFailure } from \"../reducer/suggestionSlice\";\n\n\n//리스트\nfunction* suggestionUser(action: PayloadAction<SuggestionPayload>) {\n  // alert(\"suggestion saga action 감지\")\n  try {\n      const result: SuggestionListDataPayload = yield call(\n        suggestionAPI.suggestionAPI,\n        action.payload\n      );\n      console.log('saga 실행')\n      // alert(`saga action 실행 후 alert ::: ${JSON.stringify(action.payload)}`)\n      yield put(suggestionSuccess(result));\n      // alert(\"suggestion saga 실행\")\n      // window.localStorage.setItem('sessionSuggestion', JSON.stringify(result.data)) \n\n  } catch (error: any) {\n      yield put(suggestionFailure(error))\n      alert(error)\n  }\n}\n\nfunction* accecpt(action: PayloadAction<SuggestionResultPayload>){\n  try {\n    const result: SuggestionResultPayload = yield call(\n      suggestionAPI.suggestionAcceptAPI,\n      action.payload\n    );\n    yield put(suggestionAcceptSuccess(result));\n    // window.location.href =''\n  } catch (error: any) {\n    yield put(suggestionAcceptFailure(error))\n    alert(error)\n  }\n}\n\nfunction* reject(action: PayloadAction<SuggestionResultPayload>){\n  try {\n    const result: SuggestionResultPayload = yield call(\n      suggestionAPI.suggestionRejectAPI,\n      action.payload\n    );\n    yield put(suggestionRejectSuccess(result));\n    // window.location.href =''\n  } catch (error: any) {\n    yield put(suggestionRejectFailure(error))\n    alert(error)\n  }\n}\n\nexport function* wacthSuggestion(){\n  yield takeLatest(suggestionRequest.type, suggestionUser);\n}\n\nexport function* wacthAccept(){\n  yield takeLatest(suggestionAcceptRequest.type, accecpt)\n}\n\nexport function* wacthReject(){\n  yield takeLatest(suggestionRejectRequest.type, reject)\n}"]},"metadata":{},"sourceType":"module"}