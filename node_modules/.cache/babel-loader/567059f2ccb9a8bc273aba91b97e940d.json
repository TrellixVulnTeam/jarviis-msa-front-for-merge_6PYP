{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\"; //받아오는 데이터//\n\nconst initialState = {\n  eventLoading: false,\n  eventData: null,\n  error: null\n};\nconst eventSlice = createSlice({\n  name: \"events\",\n  initialState,\n  reducers: {\n    //suggestion\n    eventRequest(state, _action) {\n      console.log('reducer 실행');\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    eventSuccess(state, action) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    eventFailure(state, action) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n\n    // 수정필요(디테일 확인해야함)\n    addEventRequest(state, _action) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    addEventSuccess(state, action) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    addEventFailure(state, action) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n\n    deleteEventRequest(state, _action) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    deleteEventSuccess(state, action) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    deleteEventFailure(state, action) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    event: eventSlice.reducer\n  }\n});\nconst {\n  reducer,\n  actions\n} = eventSlice;\nexport const {\n  eventRequest,\n  eventSuccess,\n  eventFailure,\n  addEventRequest,\n  addEventSuccess,\n  addEventFailure,\n  deleteEventRequest,\n  deleteEventSuccess,\n  deleteEventFailure\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis/jarviis-msa-front-for-merge/src/features/calendar/reducer/calendarSlice.ts"],"names":["configureStore","createSlice","initialState","eventLoading","eventData","error","eventSlice","name","reducers","eventRequest","state","_action","console","log","eventSuccess","action","payload","eventFailure","addEventRequest","addEventSuccess","addEventFailure","deleteEventRequest","deleteEventSuccess","deleteEventFailure","store","reducer","event","actions"],"mappings":"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","sourcesContent":["import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n//받아오는 데이터//\nexport interface eventDataPayload {\n  data:[\n    id: number,\n    user_id: number,\n    created: string,\n    update: string,\n    classification: string,\n    type: string,\n    title: string,\n    start: string,\n    end: string,\n    location: string,\n    completion: string,\n    description: string\n  ]\n}\n\n\n//요청하는 데이터\n\n\nexport interface completionPayload {\n  id:number;\n  completion: boolean;\n}\n\nexport interface addEventPayload{\n  user_id: number,\n  classification: string,\n  title: string,\n  start: string,\n  end: string,\n  location: string, \n  completion: string, \n  description: string, \n}\n\n\n//미들웨어\nexport interface eventState {\n  eventLoading: boolean;\n  eventData: any;\n  error: any;\n}\n\n// api의 param 타입\nexport interface idParamType {\n  id: number;\n}\nexport interface UserParamType {\n  user_id: number;\n}\n\n\n\nconst initialState: eventState = {\n  eventLoading : false,\n  eventData: null,\n  error: null,\n};\n\nconst eventSlice = createSlice({\n  name: \"events\",\n  initialState,\n  reducers: {\n\n    //suggestion\n    eventRequest(state: eventState, _action: PayloadAction<UserParamType>) {\n      console.log('reducer 실행')\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    eventSuccess(state: eventState, action: PayloadAction<eventDataPayload>) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    eventFailure(state: eventState, action: PayloadAction<{ error: any }>) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n\n    // 수정필요(디테일 확인해야함)\n    \n    addEventRequest(state: eventState, _action: PayloadAction<addEventPayload>) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    addEventSuccess(state: eventState, action: PayloadAction<addEventPayload>) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    addEventFailure(state: eventState, action: PayloadAction<{ error: any }>) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },    \n    deleteEventRequest(state: eventState, _action: PayloadAction<idParamType>) {\n      state.eventLoading = true;\n      state.error = null;\n    },\n\n    deleteEventSuccess(state: eventState, action: PayloadAction<idParamType>) {\n      state.eventLoading = false;\n      state.eventData = action.payload;\n    },\n\n    deleteEventFailure(state: eventState, action: PayloadAction<{ error: any }>) {\n      state.eventLoading = true;\n      state.error = action.payload;\n    },\n  }\n})\n\nconst store = configureStore({\n  reducer: {\n      event: eventSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nconst { reducer, actions } = eventSlice;\n\nexport const {\n  eventRequest,\n  eventSuccess,\n  eventFailure,\n  addEventRequest,\n  addEventSuccess,\n  addEventFailure,\n  deleteEventRequest,\n  deleteEventSuccess,\n  deleteEventFailure\n} = actions;\n\nexport default reducer;\n    \n\n"]},"metadata":{},"sourceType":"module"}