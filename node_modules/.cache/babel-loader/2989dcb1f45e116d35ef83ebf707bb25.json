{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emma0\\\\workspace\\\\jarviis\\\\jarviis-msa-front-for-merge\\\\src\\\\features\\\\chatbot\\\\components\\\\ChatModules.js\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Ask(props) {\n  const dispatch = useDispatch();\n  const key = props.previousStep.key;\n  const [counter, setCounter] = useState(0);\n  const [answer, setAnswer] = useState([]);\n  const [text, setText] = useState('');\n  const botAnswer = {\n    [key]: useSelector(state => state.chat.chatData[key])\n  }; // const [ count, setCount] = useState(0)\n  // const [ test, setTest] = useState('')\n  // const [ chatanswer, setChatAnswer] = useState({\n  //   data: {\n  //     chatAnswer : \"\",\n  //     chatKey: \"\"\n  //   }\n  // })\n\n  useEffect(() => {\n    setText(props.steps.userinput.value);\n    dispatch(chatRequest({\n      'chatKey': props.previousStep.key,\n      'chatAnswer': props.steps.userinput.value\n    }));\n  }, [text]); // const a = useSelector(state => state.chat.chatData)\n  // setAnswer(a)\n  // let chatanswer\n  // try {\n\n  const chatanswer = useSelector(state => state.chat.chatData[key]); // } catch (error) {\n  //   chatanswer = \"error\"\n  // }\n  // alert(`챗데이터 확인임@@! ${JSON.stringify(chatanswer)}`)\n  // setAnswer(chatanswer['data'])\n  // if (answer != null && counter <1 ){\n  //   setCounter(counter + 1)\n  //   setAnswer(answer['data'])\n  // }\n  // alert(`AnswerData확인!! ::: ${JSON.stringify(answer)}`)\n  // if(chatanswer == null){\n  //   alert('답이 아직 안옴 대기')\n  // }\n  // else{\n  //   alert('답장이 왓다')\n  // }\n  // console.log(`=============state :: data :: ${JSON.stringify(answer)}`)\n  // if(answer != null){\n  //     alert('answer 잇음')\n  //     setCount(count+1),\n  //     setChatAnswer(answer)\n  //     alert(answer.data.chatKey)\n  //     if (answer.data.chatKey == key){\n  //       alert(\" 키가 맞다!!\")\n  //       setTest(answer.data.chatAnswer)\n  //     }\n  // }\n  // else{\n  //   alert('answer 없음')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(chatanswer)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\nexport function FirstAnswer() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(chatRequest({\n      'chatKey': \"initialKey\",\n      'chatAnswer': \"오늘 날씨\"\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uAD81\\uAE08\\uD558\\uC2E0 \\uBD80\\uBD84 \\uC9C8\\uBB38\\uD574\\uC8FC\\uC138\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\nexport function ResetMessage() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB610 \\uB2E4\\uB978 \\uAD81\\uAE08\\uD558\\uC2E0 \\uBD80\\uBD84\\uC774 \\uC788\\uB098\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["C:/Users/emma0/workspace/jarviis/jarviis-msa-front-for-merge/src/features/chatbot/components/ChatModules.js"],"names":["useEffect","useState","useDispatch","useSelector","chatRequest","Ask","props","dispatch","key","previousStep","counter","setCounter","answer","setAnswer","text","setText","botAnswer","state","chat","chatData","steps","userinput","value","chatanswer","JSON","stringify","FirstAnswer","ResetMessage"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,oCAA5B;;;AAEA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAmB;AAEtB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,GAAG,GAAGF,KAAK,CAACG,YAAN,CAAmBD,GAA/B;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAEa,IAAF,EAAQC,OAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMe,SAAS,GAAG;AAChB,KAACR,GAAD,GAAML,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAoBX,GAApB,CAAV;AADD,GAAlB,CARsB,CAatB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAR,EAAAA,SAAS,CAAC,MAAI;AACZe,IAAAA,OAAO,CAACT,KAAK,CAACc,KAAN,CAAYC,SAAZ,CAAsBC,KAAvB,CAAP;AACAf,IAAAA,QAAQ,CAACH,WAAW,CAAC;AAAC,iBAAUE,KAAK,CAACG,YAAN,CAAmBD,GAA9B;AAAkC,oBAAaF,KAAK,CAACc,KAAN,CAAYC,SAAZ,CAAsBC;AAArE,KAAD,CAAZ,CAAR;AACD,GAHQ,EAGP,CAACR,IAAD,CAHO,CAAT,CAtBsB,CA0BtB;AACA;AAEA;AACA;;AACC,QAAMS,UAAU,GAAGpB,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAoBX,GAApB,CAAV,CAA9B,CA/BqB,CAgCtB;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACE,sBACE;AAAA,2BACA;AAAA,gBAAMgB,IAAI,CAACC,SAAL,CAAeF,UAAf;AAAN;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAKH;AAED,OAAO,SAASG,WAAT,GAAsB;AAC3B,QAAMnB,QAAQ,GAAGL,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAI;AACZO,IAAAA,QAAQ,CAACH,WAAW,CAAC;AAAC,iBAAU,YAAX;AAAwB,oBAAa;AAArC,KAAD,CAAZ,CAAR;AACD,GAFQ,EAEP,EAFO,CAAT;AAGA,sBAAO;AAAA,2BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAKC;AAEL,OAAO,SAASuB,YAAT,GAAuB;AAC9B,sBAAO;AAAA,2BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAKC","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { chatRequest } from \"features/chatbot/reducer/chatSlice\"\n\nexport function Ask(props){\n    \n    const dispatch = useDispatch()\n    const key = props.previousStep.key\n    const [counter, setCounter] = useState(0)\n    const [answer, setAnswer] = useState([])\n    const [ text, setText ] = useState('')\n\n    const botAnswer = {\n      [key]:useSelector(state => state.chat.chatData[key])\n    }\n\n    \n    // const [ count, setCount] = useState(0)\n    // const [ test, setTest] = useState('')\n    // const [ chatanswer, setChatAnswer] = useState({\n    //   data: {\n    //     chatAnswer : \"\",\n    //     chatKey: \"\"\n    //   }\n    // })\n\n    useEffect(()=>{\n      setText(props.steps.userinput.value)\n      dispatch(chatRequest({'chatKey':props.previousStep.key,'chatAnswer':props.steps.userinput.value}))\n    },[text])\n    // const a = useSelector(state => state.chat.chatData)\n    // setAnswer(a)\n\n    // let chatanswer\n    // try {\n     const chatanswer = useSelector(state => state.chat.chatData[key])\n    // } catch (error) {\n    //   chatanswer = \"error\"\n    // }\n\n    // alert(`챗데이터 확인임@@! ${JSON.stringify(chatanswer)}`)\n\n    // setAnswer(chatanswer['data'])\n    \n    // if (answer != null && counter <1 ){\n    //   setCounter(counter + 1)\n    //   setAnswer(answer['data'])\n    // }\n    // alert(`AnswerData확인!! ::: ${JSON.stringify(answer)}`)\n    // if(chatanswer == null){\n    //   alert('답이 아직 안옴 대기')\n    // }\n    // else{\n    //   alert('답장이 왓다')\n    // }\n    // console.log(`=============state :: data :: ${JSON.stringify(answer)}`)\n    // if(answer != null){\n    //     alert('answer 잇음')\n    //     setCount(count+1),\n    //     setChatAnswer(answer)\n    //     alert(answer.data.chatKey)\n    //     if (answer.data.chatKey == key){\n    //       alert(\" 키가 맞다!!\")\n    //       setTest(answer.data.chatAnswer)\n    //     }\n    \n    // }\n    // else{\n    //   alert('answer 없음')\n    // }\n      return (\n        <>\n        <div>{JSON.stringify(chatanswer)}</div>\n        </>\n      );\n  }\n\n  export function FirstAnswer(){\n    const dispatch = useDispatch()\n    useEffect(()=>{\n      dispatch(chatRequest({'chatKey':\"initialKey\",'chatAnswer':\"오늘 날씨\"}))\n    },[])\n    return(<>\n        <div>\n         궁금하신 부분 질문해주세요\n        </div>\n    </>)\n    }\n\nexport function ResetMessage(){\nreturn(<>\n    <div>\n    또 다른 궁금하신 부분이 있나요?\n    </div>\n</>)\n}"]},"metadata":{},"sourceType":"module"}