{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { historyFailure, historyRemoveFailure, historyRemoveRequest, historyRemoveSuccess, historyRequest, historySuccess } from \"features/history/reducer/historySlice\";\nimport { historyListRequest, historyListSuccess, historyListFailure } from \"features/history/reducer/historySlice\";\nimport { historyModifyRequest, historyModifySuccess, historyModifyFailure } from \"features/history/reducer/historySlice\";\nimport { historyAutoAddRequest, historyAutoAddSuccess, historyAutoAddFailure } from \"features/history/reducer/historySlice\";\nimport { historyAPI } from \"features/history\";\n\nfunction* create(action) {\n  try {\n    const result = yield call(historyAPI.createAPI, action.payload);\n    yield put(historySuccess(result));\n    alert(JSON.stringify(result.data.log_type));\n\n    if (result.data.log_type != \"todo\") {\n      window.location.href = \"/history/history\";\n    }\n  } catch (error) {\n    yield put(historyFailure(error));\n    alert(`ERROR :: ${error}`);\n  }\n}\n\nexport function* watchCreate() {\n  yield takeLatest(historyRequest.type, create);\n} //리스트\n\nfunction* list(action) {\n  alert('# 3 SAGA - historyRequest');\n\n  try {\n    const result = yield call(historyAPI.listAPI, action.payload);\n    alert('# 5 SAGA success - historyRequest');\n    yield put(historyListSuccess(result));\n    window.localStorage.setItem('sessionHistory', JSON.stringify(result.data));\n  } catch (error) {\n    yield put(historyListFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryList() {\n  yield takeLatest(historyListRequest.type, list);\n} //수정\n\nfunction* modify(action) {\n  try {\n    const result = yield call(historyAPI.modifyAPI, action.payload);\n    yield put(historyModifySuccess(result));\n    window.location.href = \"/history/history\";\n  } catch (error) {\n    yield put(historyModifyFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryModify() {\n  yield takeLatest(historyModifyRequest.type, modify);\n} //자동 기록 추가\n\nfunction* autoAdd(action) {\n  try {\n    const result = yield call(historyAPI.autoAddAPI, action.payload);\n    yield put(historyAutoAddSuccess(result));\n    window.location.href = \"/history/history\";\n  } catch (error) {\n    yield put(historyAutoAddFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryAutoAdd() {\n  yield takeLatest(historyAutoAddRequest.type, autoAdd);\n} // 삭제\n\nfunction* remove(action) {\n  try {\n    const result = yield call(historyAPI.removeAPI, action.payload);\n    yield put(historyRemoveSuccess(result));\n    window.location.href = \"/history/history\";\n  } catch (error) {\n    yield put(historyRemoveFailure(error));\n    alert(error);\n  }\n}\n\nexport function* watchHistoryRemove() {\n  yield takeLatest(historyRemoveRequest.type, remove);\n}","map":{"version":3,"sources":["C:/자비스 임시/jarviis_docker/front/src/features/history/module/historySaga.ts"],"names":["call","put","takeLatest","historyFailure","historyRemoveFailure","historyRemoveRequest","historyRemoveSuccess","historyRequest","historySuccess","historyListRequest","historyListSuccess","historyListFailure","historyModifyRequest","historyModifySuccess","historyModifyFailure","historyAutoAddRequest","historyAutoAddSuccess","historyAutoAddFailure","historyAPI","create","action","result","createAPI","payload","alert","JSON","stringify","data","log_type","window","location","href","error","watchCreate","type","list","listAPI","localStorage","setItem","watchHistoryList","modify","modifyAPI","watchHistoryModify","autoAdd","autoAddAPI","watchHistoryAutoAdd","remove","removeAPI","watchHistoryRemove"],"mappings":"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","sourcesContent":["import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { HistoryDataPayload, historyFailure, HistoryPayload, historyRemoveFailure, HistoryRemovePayload, historyRemoveRequest, historyRemoveSuccess, historyRequest, historySuccess, ListDataPayload } from \"features/history/reducer/historySlice\";\nimport { historyListRequest, historyListSuccess, historyListFailure } from \"features/history/reducer/historySlice\"\nimport { HistoryModifyPayload, historyModifyRequest, historyModifySuccess, historyModifyFailure } from \"features/history/reducer/historySlice\";\nimport { historyAutoAddRequest, historyAutoAddSuccess, historyAutoAddFailure } from \"features/history/reducer/historySlice\";\nimport { historyAPI } from \"features/history\";\n\nfunction* create(action: PayloadAction<HistoryPayload>) {\n    try {\n        const result: HistoryDataPayload = yield call(\n            historyAPI.createAPI,\n            action.payload\n        );\n        yield put(historySuccess(result));\n        alert(JSON.stringify(result.data.log_type))\n        if (result.data.log_type != \"todo\") {\n            window.location.href = \"/history/history\"\n        }\n    } catch (error: any) {\n        yield put(historyFailure(error))\n        alert(`ERROR :: ${error}`)\n    }\n}\n\nexport function* watchCreate() {\n    yield takeLatest(historyRequest.type, create);\n}\n//리스트\nfunction* list(action: PayloadAction<ListDataPayload>) {\n    alert('# 3 SAGA - historyRequest')\n\n    try {\n        const result: HistoryDataPayload = yield call(\n            historyAPI.listAPI,\n            action.payload\n        );\n        alert('# 5 SAGA success - historyRequest')\n        yield put(historyListSuccess(result));\n        \n\n        window.localStorage.setItem('sessionHistory', JSON.stringify(result.data))\n\n    } catch (error: any) {\n        yield put(historyListFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchHistoryList() {\n    yield takeLatest(historyListRequest.type, list);\n}\n//수정\nfunction* modify(action: PayloadAction<HistoryModifyPayload>) {\n    try {\n        const result: HistoryModifyPayload = yield call(\n            historyAPI.modifyAPI,\n            action.payload\n        );\n        yield put(historyModifySuccess(result));\n        window.location.href = \"/history/history\"\n    } catch (error: any) {\n        yield put(historyModifyFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchHistoryModify() {\n    yield takeLatest(historyModifyRequest.type, modify);\n}\n\n//자동 기록 추가\nfunction* autoAdd(action: PayloadAction<HistoryDataPayload>) {\n    try {\n        const result: HistoryDataPayload = yield call(\n            historyAPI.autoAddAPI,\n            action.payload\n        );\n        yield put(historyAutoAddSuccess(result));\n        window.location.href = \"/history/history\"\n    } catch (error: any) {\n        yield put(historyAutoAddFailure(error))\n        alert(error)\n    }\n}\n\nexport function* watchHistoryAutoAdd() {\n    yield takeLatest(historyAutoAddRequest.type, autoAdd);\n}\n// 삭제\nfunction* remove(action: PayloadAction<HistoryRemovePayload>) {\n    try {\n        const result: HistoryRemovePayload = yield call(\n            historyAPI.removeAPI,\n            action.payload\n        );\n        yield put(historyRemoveSuccess(result));\n        window.location.href = \"/history/history\"\n    } catch (error: any) {\n        yield put(historyRemoveFailure(error))\n        alert(error)\n    }\n}\nexport function* watchHistoryRemove() {\n    yield takeLatest(historyRemoveRequest.type, remove);\n}"]},"metadata":{},"sourceType":"module"}